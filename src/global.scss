@use "sass:color";
@use "./styles" as styles;

* {
  box-sizing: border-box;
}

:root {
  --user-font-scale: 1rem - 16px;
  --max-width: calc(100% - 1rem);

  color-scheme: light;
}

@tailwind base;
@tailwind components;
@tailwind utilities;

/**
 * WHAT IS THIS FILE?
 *
 * Globally applied styles. No matter which components are in the page or matching route,
 * the styles in here will be applied to the Document, without any sort of CSS scoping.
 *
 */
html {
  -webkit-text-size-adjust: 100%;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica,
    Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji;
}

body {
  padding: 0;
  line-height: inherit;

  font-family: var(--font-body);
  font-size: 1rem;
  font-size: clamp(0.9rem, 0.75rem + 0.375vw + var(--user-font-scale), 1rem);
  line-height: 1.5;

  background-color: var(--background);
  color: var(--on-background);

  display: flex;
  flex-direction: column;
  height: 100vh;
}

main {
  @apply flex-1 px-5 py-3;
}

:root.dark {
  color-scheme: dark;
  --background: #{styles.fnc-color-get_dark_color("background")};
  --error-container: #{styles.fnc-color-get_dark_color("error-container")};
  --error: #{styles.fnc-color-get_dark_color("error")};
  --inverse-on-surface: #{styles.fnc-color-get_dark_color("inverse-on-surface")};
  --inverse-primary: #{styles.fnc-color-get_dark_color("inverse-primary")};
  --inverse-surface: #{styles.fnc-color-get_dark_color("inverse-surface")};
  --on-background: #{styles.fnc-color-get_dark_color("on-background")};
  --on-error-container: #{styles.fnc-color-get_dark_color("on-error-container")};
  --on-error: #{styles.fnc-color-get_dark_color("on-error")};
  --on-primary-container: #{styles.fnc-color-get_dark_color(
      "on-primary-container"
    )};
  --on-primary: #{styles.fnc-color-get_dark_color("on-primary")};
  --on-secondary-container: #{styles.fnc-color-get_dark_color(
      "on-secondary-container"
    )};
  --on-secondary: #{styles.fnc-color-get_dark_color("on-secondary")};
  --on-surface-variant: #{styles.fnc-color-get_dark_color("on-surface-variant")};
  --on-surface: #{styles.fnc-color-get_dark_color("on-surface")};
  --on-tertiary-container: #{styles.fnc-color-get_dark_color(
      "on-tertiary-container"
    )};
  --on-tertiary: #{styles.fnc-color-get_dark_color("on-tertiary")};
  --outline-variant: #{styles.fnc-color-get_dark_color("outline-variant")};
  --outline: #{styles.fnc-color-get_dark_color("outline")};
  --primary-container: #{styles.fnc-color-get_dark_color("primary-container")};
  --primary: #{styles.fnc-color-get_dark_color("primary")};
  --scrim: #{styles.fnc-color-get_dark_color("scrim")};
  --secondary-container: #{styles.fnc-color-get_dark_color(
      "secondary-container"
    )};
  --secondary: #{styles.fnc-color-get_dark_color("secondary")};
  --shadow: #{styles.fnc-color-get_dark_color("shadow")};
  --surface-tint: #{styles.fnc-color-get_dark_color("surface-tint")};
  --surface-variant: #{styles.fnc-color-get_dark_color("surface-variant")};
  --surface: #{styles.fnc-color-get_dark_color("surface")};
  --tertiary-container: #{styles.fnc-color-get_dark_color("tertiary-container")};
  --tertiary: #{styles.fnc-color-get_dark_color("tertiary")};

  --primary-rgb: #{styles.fnc-color-get_dark_color_rgb("primary")};
}

:root:not(.dark) {
  color-scheme: light;
  --background: #{styles.fnc-color-get_light_color("background")};
  --error-container: #{styles.fnc-color-get_light_color("error-container")};
  --error: #{styles.fnc-color-get_light_color("error")};
  --inverse-on-surface: #{styles.fnc-color-get_light_color("inverse-on-surface")};
  --inverse-primary: #{styles.fnc-color-get_light_color("inverse-primary")};
  --inverse-surface: #{styles.fnc-color-get_light_color("inverse-surface")};
  --on-background: #{styles.fnc-color-get_light_color("on-background")};
  --on-error-container: #{styles.fnc-color-get_light_color("on-error-container")};
  --on-error: #{styles.fnc-color-get_light_color("on-error")};
  --on-primary-container: #{styles.fnc-color-get_light_color(
      "on-primary-container"
    )};
  --on-primary: #{styles.fnc-color-get_light_color("on-primary")};
  --on-secondary-container: #{styles.fnc-color-get_light_color(
      "on-secondary-container"
    )};
  --on-secondary: #{styles.fnc-color-get_light_color("on-secondary")};
  --on-surface-variant: #{styles.fnc-color-get_light_color("on-surface-variant")};
  --on-surface: #{styles.fnc-color-get_light_color("on-surface")};
  --on-tertiary-container: #{styles.fnc-color-get_light_color(
      "on-tertiary-container"
    )};
  --on-tertiary: #{styles.fnc-color-get_light_color("on-tertiary")};
  --outline-variant: #{styles.fnc-color-get_light_color("outline-variant")};
  --outline: #{styles.fnc-color-get_light_color("outline")};
  --primary-container: #{styles.fnc-color-get_light_color("primary-container")};
  --primary: #{styles.fnc-color-get_light_color("primary")};
  --scrim: #{styles.fnc-color-get_light_color("scrim")};
  --secondary-container: #{styles.fnc-color-get_light_color(
      "secondary-container"
    )};
  --secondary: #{styles.fnc-color-get_light_color("secondary")};
  --shadow: #{styles.fnc-color-get_light_color("shadow")};
  --surface-tint: #{styles.fnc-color-get_light_color("surface-tint")};
  --surface-variant: #{styles.fnc-color-get_light_color("surface-variant")};
  --surface: #{styles.fnc-color-get_light_color("surface")};
  --tertiary-container: #{styles.fnc-color-get_light_color("tertiary-container")};
  --tertiary: #{styles.fnc-color-get_light_color("tertiary")};

  --primary-rgb: #{styles.fnc-color-get_light_color_rgb("primary")};
}

.color-primary {
  background-color: var(--primary);
  color: var(--on-primary);
}
.color-secondary {
  background-color: var(--secondary);
  color: var(--on-secondary);
}
.color-tertiary {
  background-color: var(--tertiary);
  color: var(--on-tertiary);
}
.color-error {
  background-color: var(--error);
  color: var(--on-error);
}
.color-background {
  background-color: var(--background);
  color: var(--on-background);
}
.color-surface {
  background-color: var(--surface);
  color: var(--on-surface);
}
.color-surface-variant {
  background-color: var(--surface-variant);
  color: var(--on-surface-variant);
}

.main-container {
  max-width: 840px;
  @apply mx-auto;
}

@layer components {
  @include styles.mixin-layout-text-text(
    styles.fnc-breakpoint-get_breakpoints("2xsm")
  );

  @include styles.mixin-screen-from(
    styles.fnc-breakpoint-get_breakpoints("lg")
  ) {
    @include styles.mixin-layout-text-text(
      styles.fnc-breakpoint-get_breakpoints("lg")
    );
  }
}

@include styles.mixin-layout-color-color();
